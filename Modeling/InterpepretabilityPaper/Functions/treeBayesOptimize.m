function [results] = treeBayesOptimize(trainingData,cvp,Options)
% Returns an optimized tree classifier.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy in percent.
%
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%
% Auto-generated by MATLAB on 20-Aug-2020 21:24:05


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictors = inputTable(:, Options.predictorNames);
response = inputTable.(Options.metric);                                          %14


params = hyperparameters('fitctree',predictors,response);
% MinLeafSize = params(1,1)
% MaxNumSplits = params(2,1)
params(1,1).Optimize = true;
params(2,1).Optimize = true;

% Train a classifier
% Objective function
fun = @(x)1-treeObjectiveFunction(x,predictors,response,Options,cvp);
results = bayesopt(fun,[params(1,1),params(2,1)], ...
    'Verbose',1,...
    'MaxObjectiveEvaluations', 75, ...
    'AcquisitionFunctionName','expected-improvement-plus');